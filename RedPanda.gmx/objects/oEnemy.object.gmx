<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sKingEnemy</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///initialize variables

//set initial direction as random between left/right
dir = choose(1, -1);
//set move speed
moveSpeed = 1;
//matc player gravity
grav = oPlayer.grav;
//set horizontal speed
hsp = 0;
//set vertical speed
vsp = 0;
//decide if we avoid edges
avoidEdges = 1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hsp = dir * moveSpeed;
vsp += grav;

//Horizontal Collision
if(place_meeting(x+hsp, y, oWall))
{
    //if there's a wall above to the left or right of us, don't let us walk through it
    //(warp sprite to touch if next frame would have been past collision)
    while(!place_meeting(x+sign(hsp), y, oWall))
    {
        x += sign(hsp);
    }
    hsp = 0;
    //turn around when you hit a wall
    dir *= -1;
}
//set x position
x += hsp;

//Vertical Collision
if(place_meeting(x, y+vsp, oWall))
{
    
    while(!place_meeting(x, y+sign(vsp), oWall))
    {
        y += sign(vsp);
    }
    vsp = 0;
    if((avoidEdges) &amp;&amp; !position_meeting(x+(sprite_width/4)*dir, y+(sprite_height/2)+2,oWall))
    {
        //turn around at edges
        dir *= -1;
    }
}
//set y position
y += vsp;

//Collision with Player
if(place_meeting(x, y, oPlayer))
{
    //is player jumping on enemy?
    if(oPlayer.y &lt; y - 16)
    {
        //player bounces off enemy
        with(oPlayer)
        {
            vsp = -jumpSpeed;
        }
        
        //kill enemy
        instance_destroy();
    }
    else
    {   
        //kill player
        KillPlayer();
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
