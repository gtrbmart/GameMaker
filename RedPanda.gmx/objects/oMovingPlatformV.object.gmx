<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sMovingPlatform</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>oSolid</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>dir = choose(1,-1);
moveSpeed = global.vspPlatformV;
vsp = 0;
hsp = 0;
playerOnBoard = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>vsp = dir * moveSpeed;

//get player object if player is riding
player = instance_place(x, y-(oPlayer.sprite_height/2), oPlayer)

//Vertical Collision (player)
//keep player riding on top
if(player != noone) //if player is riding
{
    playerOnBoard = 1;
    player.vspCarry = vsp;
}
else
{
    playerOnBoard = 0;
}

//Vertical Collision (walls)
if(place_meeting(x,y+vsp, oWall))
{
    while(!place_meeting(x, y+sign(vsp), oWall))
    {
        y += sign(vsp);
    }
    vsp = 0;
    dir *= -1;
}
else if((player != noone) &amp;&amp; place_meeting(x,y+vsp-player.sprite_height,oWall))
{
    while(!place_meeting(x, y+sign(vsp)-player.sprite_height, oWall))
    {
        y += sign(vsp);
    }
    vsp = 0;
    dir *= -1;
}

if(place_meeting(x, y+vsp, oWall))
{
    if(playerOnBoard)
    {
        //if player is riding, turn around when their head touches
        //(warp sprite to touch if next frame would have been past collision)
        if(sign(vsp) == 1)  //if moving down
        {
            while(!place_meeting(x, y+sign(vsp)+sprite_height, oWall)){
                y += vsp;
            }
        }
        else  //if moving up, check for player height too
        {       
             while(!place_meeting(x, y+sign(vsp)+sprite_height-player.sprite_height, oWall)){
                y -= vsp;
            }
        }
    }
    else
    {
         //if there's a wall above or below us, don't let us walk through it
        //(warp sprite to touch if next frame would have been past collision)
        while(!place_meeting(x, y+sign(vsp)+sprite_height, oWall))
        {
            y += sign(vsp);
        }
    }
    //set vertical speed to 0 to stop moving
    
}

//set y position
y += vsp;


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
