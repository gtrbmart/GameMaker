<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sMovingPlatform</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>oSolid</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///initialize variables

//set initial direction as random between left/right
dir = choose(1, -1);
//set move speed
moveSpeed = global.hspPlatformH;
//set horizontal speed
hsp = 0;
vsp = 0;

sprite_index = -1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//need a temporary collision mask for colission
mask_index = sMovingPlatform;
    
hsp = dir * moveSpeed;

//Horizontal Collision
if(place_meeting(x+hsp, y, oWall))
{
    //if there's a wall above to the left or right of us, don't let us walk through it
    //(warp sprite to touch if next frame would have been past collision)
    while(!place_meeting(x+sign(hsp), y, oWall))
    {
        x += sign(hsp);
    }
    hsp = 0;
    //turn around when you hit a wall
    dir *= -1;
}
//set x position
x += hsp;

if(instance_exists(oPlayer))
{
    //if player exists and is jumping through the bottom or trying to fall down through
    if((round(oPlayer.y + (oPlayer.sprite_height/2)) &gt; y+1) || oPlayer.kDown)
    {
        //get rid of collision mask
        mask_index = -1;
    }
    else
    {
        //set collision mask (do I need this anymore since it's set at the top of this event?)
        mask_index = sMovingPlatform;
        if(place_meeting(x, y-1, oPlayer))
        {
            //give player hspCarry the hsp of the platform 
            oPlayer.vxCarry = hsp;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the sprite
draw_sprite(sMovingPlatform,0,x,y);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
